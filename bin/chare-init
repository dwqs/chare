#!/usr/bin/env node

let program = require('commander');
let chalk = require('chalk');
let inquirer = require('inquirer');
let path = require('path');
let rm = require('rimraf').sync;
let uuidV1 = require('uuid/v1');
let ora = require('ora');
let os = require('os');
let download = require('download-git-repo');

let log = require('../src/log');
let checkTpl = require('../src/checkTpl');
let checkRepos = require('../src/checkRepos');
let generate = require('../src/generate');
let utils = require('../src/utils');

/**
 * Usage.
 */

program
    .usage('<template-name> [project-name]')
    .option('-c, --clone', 'use git clone');

/**
 * Help.
 */

program.on('--help', function () {
    log.tips('  Examples:');
    log.tips();
    log.tips(chalk.gray('    # create a new project with an official template'));
    log.tips('    $ chare init vue-webpack my-project');
    log.tips();
});

function help () {
    program.parse(process.argv);
    if (program.args.length < 1) {
        return program.help();
    }
}

help();

/**
 * Padding.
 */

log.tips();
process.on('exit', () => log.tips());

/**
 * Settings.
 */

let template = program.args[0];
let projectDirName = program.args[1] || '.';
let projectName = projectDirName === '.' ? path.relative('../', process.cwd()) : projectDirName;
let projectDirPath = path.resolve(projectDirName || '.');
let clone = program.clone || false;
let hasSlash = template.indexOf('/') > -1;

if(utils.isExist(projectDirPath)){
    inquirer.prompt([{
        type: 'confirm',
        message: projectDirName === '.'
            ? 'Generate project in current directory?'
            : 'Target directory exists. Continue?',
        name: 'ok'
    }]).then((answers) => {
        if(answers.ok){
            runTask();
        }
    });
} else {
    runTask();
}

function runTask(){
    let isLocalTemplate = utils.isLocalTemplate(template);

    if(isLocalTemplate){
        let templatePath = template.startsWith('/') || /^\w:/.test(template)
            ? template : path.normalize(path.join(process.cwd(), template));

        if(utils.isExist(templatePath)){
            log.success(`Template is from ${templatePath}`);
            log.tips();

            generate(projectName,templatePath,projectDirPath, (err,msg = "") => {
                if(err){
                    log.error(`Generated error: ${err.message.trim()}`);
                }

                if(msg){
                    let re = /{{[^{}]+}}/g;
                    log.tips('\n' + msg.replace(re,projectName).split(/\r?\n/g).map(function (line) {
                            return '   ' + line
                        }).join('\n'));
                }
            });
        } else {
            log.tips();
            log.error(`Local template ${template} not found.`);
        }
    } else if(hasSlash) {
        let arr = template.split(path.sep);

        //judge the template whether if match 'sdsd/sdasd' or 'sdasd/sdasd/' or 'sda/sdas/**'
        if((arr.length === 2 && arr[0] && arr[1]) || (arr.length > 2)){
            log.tips();
            log.tips(chalk.red(`Local template ${template} not found.`));
            log.tips();

            //check repo from github.com
            checkRepos(template,downloadAndGenerate);
        } else {
            //if template match sda/ and use official templates
            let officialTemplate = 'waka-templates/' + template;
            checkTpl(template,officialTemplate,downloadAndGenerate);
        }

    } else {
        //use official templates
        let officialTemplate = 'waka-templates/' + template;
        checkTpl(template,officialTemplate,downloadAndGenerate);
    }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template){
    let tmp = os.tmpdir() + '/chare-template-' + uuidV1();
    let spinner = ora({
        text:`start downloading template: ${template}`,
        color:"blue"
    }).start();

    download(template,tmp,{ clone: clone }, (err) => {
        process.on('exit', () => rm(tmp));

        if(err){
            //err.code/err.message;
            spinner.text = chalk.red(`Failed to download template ${template}: ${err.message.trim()}`);
            spinner.fail();
            process.exit(1);
        }
        spinner.text = chalk.green(`${template} downloaded success`);
        spinner.succeed();
        log.tips();

        generate(projectName,tmp,projectDirPath, (err,msg = "") => {
            if(err){
                log.error(`Generated error: ${err.message.trim()}`);
            }

            if(msg){
                let re = /{{[^{}]+}}/g;
                log.tips('\n' + msg.replace(re,projectName).split(/\r?\n/g).map(function (line) {
                        return '   ' + line
                    }).join('\n'));
            }
        });
    });
}