#!/usr/bin/env node

let program = require('commander');
let chalk = require('chalk');
let inquirer = require('inquirer');
let exists = require('fs').existsSync;
let path = require('path');
let rm = require('rimraf').sync;
let uid = require('uid');
let ora = require('ora');
let os = require('os');
let download = require('download-git-repo');

let log = require('../src/log');
let checkTpl = require('../src/check');
let generate = require('../src/generate');

/**
 * Usage.
 */

program
    .usage('<template-name> [project-name]')
    .option('-c, --clone', 'use git clone');

/**
 * Help.
 */

program.on('--help', function () {
    log.tips('  Examples:');
    log.tips();
    log.tips(chalk.gray('    # create a new project with an official template'));
    log.tips('    $ chare init webpack my-project');
    log.tips();
});

/**
 * Help.
 */

function help () {
    program.parse(process.argv);
    if (program.args.length < 1) {
        return program.help();
    }
}

help();

/**
 * Padding.
 */

log.tips();
process.on('exit', () => log.tips());

/**
 * Settings.
 */

let template = program.args[0];
let projectDirName = program.args[1];
let isCurrentDir = !projectDirName || projectDirName === '.';
let clone = program.clone || false;
let projectDirPath = path.resolve(projectDirName || '.');

let officialTemplate = 'waka-templates/' + template;

if(exists(projectDirPath)){
    inquirer.prompt([{
        type: 'confirm',
        message: isCurrentDir
            ? 'Generate project in current directory?'
            : 'Target directory exists. Continue?',
        name: 'ok'
    }]).then((answers) => {
        if(answers.ok){
            checkTpl(template,officialTemplate,downloadAndGenerate);
            //downloadAndGenerate(officialTemplate);
        }
    });
} else {
    checkTpl(template,officialTemplate,downloadAndGenerate);
    //downloadAndGenerate(officialTemplate)
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template){
    let tmp = os.tmpdir() + '/chare-template-' + uid();
    let spinner = ora(`downloading template: ${template}`);

    spinner.start();

    download(template,tmp,{ clone: clone }, (err) => {
        spinner.stop();
        process.on('exit', () => rm(tmp));

        if(err){
            //err.code/err.message;
            log.error(`Failed to download repo ${template}: ${err.message.trim()}`);
            process.exit(1);
        }
        generate();
    });
}